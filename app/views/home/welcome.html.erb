<!DOCTYPE html>
<html>
<head>
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
  <script async defer src="https://buttons.github.io/buttons.js"></script>
</head>

<body>

<%= render 'navbar' %>

<div class="container-fluid" id="header-container">
  <div class="row">
    <p class="title">TIMEASURE</p>
  </div>
  <div class="row">
    <p class="subtitle">Measure the runtime of your Ruby code in production, easily.</p>
  </div>
  <div class="row" id="social-media-buttons-row">
    <div class="col">
      <a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-show-count="false">Tweet</a>
    </div>
    <div class="col">
      <a href="https://github.com/riskified/timeasure" class="github-button" data-icon="octicon-star" aria-label="Star riskified/timeasure on GitHub">Star</a>
    </div>
  </div>

  <div class="row product-value-intro" id="product-value-intro-header">
    <div class="col-3">
      <i class="fa fa-code fa-2x"></i>
    </div>
    <div class="col">
    </div>
    <div class="col-3">
      <i class="fa fa-area-chart fa-2x"></i>
    </div>
    <div class="col">
    </div>
    <div class="col-3">
      <i class="fa fa-thumbs-up fa-2x"></i>
    </div>
  </div>
  <div class="row product-value-intro">
    <div class="col-3">
      Track specific methods in your application with Timeasure's elegant class macros
    </div>
    <div class="col align-middle">
      <i class="fa fa-arrow-circle-right fa-2x"></i>
    </div>
    <div class="col-3">
      Report the collected timing data to an analytics framework of your choice (NewRelic, Google Analytics, Keen...)
    </div>
    <div class="col">
      <i class="fa fa-arrow-circle-right fa-2x"></i>
    </div>
    <div class="col-3">
      Make informed decisions and aim at the most beneficial runtime optimization tasks
    </div>
  </div>
</div>

<div class="container-fluid" id="what-is-timeasure">
  <p class="section-title">WHAT IS TIMEASURE</p>
  <div class="section-content">
    <p>Timeasure is a Ruby gem created and maintained by <a href="http://www.eliavlavi.com" target="_blank">Eliav Lavi</a> & <a href="https://www.riskified.com" target="_blank">Riskified</a>.
      Timeasure allows measuring the runtime of methods without having to alter the
      code of the methods themselves. Timeasure is intended to be used in production environments in order to achieve
      a real picture of methods' runtime. It is indeed used in production in Riskified, however please note that it is still in its
      pre-release period, so please take extra care and check it locally before deploying to production.</p>
      <p>To achieve an easy and intuitive interface, Timeasure offers elegant class macros, similar in syntax to
      Ruby's <span class="code">attr_accessor</span> or Rails' <span class="code">validates_uniquness_of</span>.</p>
    <p>Timeasure handles the runtime measurement of declared tracked methods and aggregates them on the method level.
       It is recommended to report this data to an analytics framework that allows insights gathering the end of transaction.
      Timeasure was designed with <a href="https://insights.newrelic.com/" target="_blank">NewRelic Insights</a> as the
      "<i>inspiration on the other end</i>", but it is generic enough to fit to other analytics frameworks.</p>
    <p>Below is a possible usage of Timeasure within a given class.
      Notice how the declaration of which methods to track only changes the code at the top of the class while the
      tracked methods remain intact:</p>
  </div>

  <%= render 'code_example' %>

</div>

<div class="container-fluid" id="motivation">
  <p class="section-title">MOTIVATION</p>
  <div class="section-content">
    <p>
      We strive to build fast and efficient web applications and web services.
      The need for speed might derive from contractual obligations, ongoing product improvement efforts,
      or the very desire to write better, faster code.
      Measuring the production runtime of different methods in different classes and analyzing this data is crucial
      in the process of optimizing the agility of any application's backend parts.
    </p>
    <p>
      <b>Timeasure was created in order to make the gathering of this data easy and organized.</b>
      Instead of modifying the methods you wish to measure, handling the results of the measurements and along the way
      indenting many lines of code, Timeasure offers simple class macros that help with separating the concern of
      methods measurement from the methods themselves. In addition, Timeasure is equipped with a handy Profiling Manager
      that keeps track of reported methods in an aggregated way. This part is configurable, should you want to use another
      tool to collect measurement data.
    </p>
  </div>
</div>

<div class="container-fluid" id="live-demo">
  <p class="section-title">LIVE DEMO</p>
  <div class="section-content">
    <p>To demonstrate Timeasure's abilities, this page was actually built as part of a Rails mock-app.</p>
    <p>The app includes some made-up code that serves as an imaginary job.
      It is measured by Timeasure and reports the collected information back to this view, right at the end of the transaction.</p>
    <br>
    <%= button_to 'Trigger Demo Job', home_run_demo_job_path, method: :post, remote: true, class: "btn btn-primary btn-lg" %>
    <br>
    <div id='reported-methods'>
      <table class="table table-striped" id='reported-methods-table'>
        <thead>
        <tr>
          <th scope="col" style="width: 220px">Class Name</th>
          <th scope="col" style="min-width: 200px">Method Name</th>
          <th scope="col" style="width: 220px">Call Count</th>
          <th scope="col" style="width: 220px">Runtime Sum (ms)</th>
        </tr>
        </thead>
        <tbody id='reported-methods-data'>
        </tbody>
      </table>
    </div>
    <br>
    <p>
      To gain useful knowledge from this information, it is recommended to send it to some analytics framework.
      For example, on NewRelic Insights, it might look like this:
      <%= image_tag 'new_relic_graph.png', id: 'new-relic-graph' %>
    </p>
  </div>
</div>

<div class="container-fluid" id="usage">
  <p class="section-title">USAGE</p>
  <div class="section-content">
    <p class="section-title section-sub-title">TIMEASURE COMPONENTS</p>
    <p>
      Timeasure is consisted of the core method measuring aspect and of a profiler, which gathers the measured methods
      runtime data. After adding Timeasure to your projects Gemfile, you may track methods easily as demonstrated
      in the <a href="#what-is-timeasure">What is Timeasure</a> section.
    </p>
    <br>
    <p class="section-title section-sub-title">REPORTING A METHOD CALL</p>
    <p>
      By default, any tracked method will report
      its runtime to Timeasure's profiler - <span class="code">Timeasure::Profiling::Manager</span>.
      What this means to you is that you are responsible of managing the clean-up and the reporting of the aggregated data.
      It is recommended to prepare the profiler at the beginning of a transaction in which tracked methods exist with
      <span class="code">Timeasure::Profiling::Manager.prepare</span> and to re-prepare it again at the end of
      the transaction to ensure a "clean slate" - after you have handled the aggregated data in some way.
    </p>
    <br>
    <p class="section-title section-sub-title">EXPORTING ALL METHOD CALLS</p>
    <p>
      In order to get hold of the reported methods, use <span class="code">Timeasure::Profiling::Manager.export</span>.
      This will return an array of <span class="code">ReportedMethod</span> objects. See here for further information.
    </p>
    <p><a href="https://github.com/Riskified/timeasure#usage" target="_blank">Have a look at the README for further details</a></p>
  </div>
</div>


<div class="container-fluid" id="footer">
  <p><a href="https://github.com/Riskified/timeasure" target="_blank">Github repository</a> / <a href="https://rubygems.org/gems/timeasure/" target="_blank">RubyGems page</a></p>
  <p>Created and maintained by <a href="http://www.eliavlavi.com" target="_blank">Eliav Lavi</a> & <a href="https://www.riskified.com" target="_blank">Riskified</a> / Inspired by <a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2" target="_blank">Metaprogramming Ruby 2</a> & <a href="https://hashrocket.com/blog/posts/module-prepend-a-super-story" target="_blank">Hashrocket</a></p>
</div>
</body>
</html>
